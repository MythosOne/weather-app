{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Project\\\\weather-app\\\\src\\\\components\\\\WeatherCity\\\\WeatherCity.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { WeatherForm, Title } from './WeatherCity.styled';\nimport { WeatherList } from '../WeatherList/WeatherList';\nimport { apiServiceSearchData } from '../../Api/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherCity = ({\n  weather\n}) => {\n  _s();\n  var _JSON$parse;\n  const [cities, setCities] = useState((_JSON$parse = JSON.parse(localStorage.getItem('cities'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : []);\n  const [value, setValue] = useState('');\n  const [weatherCity, setWeatherCity] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  console.log(cities);\n  // console.log(`value:${value}`);\n  // console.log(weatherCity);\n\n  const handleSubmit = value => {\n    setValue(value);\n    // setCities([]);\n  };\n  // !!!!!!!!!!!!!!!!!\n  const addCity = city => {\n    if (city.length === 0) {\n      alert('Field must be filled');\n    } /*else {\r\n      setCities([...cities, { id: nanoid(), weatherCity }]);\r\n      }*/\n  };\n  //!!!!!!!!!!!!!!!!!\n  useEffect(() => {\n    //!!!!!!!!!!!!!!\n    localStorage.setItem('cities', JSON.stringify(cities));\n    if (value.trim() === '') {\n      return;\n    }\n    setIsLoading(true);\n    apiServiceSearchData(value).then(weatherCity => setCities([...cities, {\n      ...weatherCity\n    }]))\n    // .then(weatherCity => setWeatherCity(weatherCity))\n    .catch(error => console.error(error)).finally(() => setIsLoading(false));\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(WeatherForm, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSubmit: handleSubmit,\n      onAddCity: addCity,\n      weather: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherList, {\n      cities: cities,\n      weatherCity: weatherCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherCity, \"sU1gP2tHCKmofCvVOdmzqWKUuy8=\");\n_c = WeatherCity;\nvar _c;\n$RefreshReg$(_c, \"WeatherCity\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","SearchBar","WeatherForm","Title","WeatherList","apiServiceSearchData","jsxDEV","_jsxDEV","WeatherCity","weather","_s","_JSON$parse","cities","setCities","JSON","parse","localStorage","getItem","value","setValue","weatherCity","setWeatherCity","isLoading","setIsLoading","console","log","handleSubmit","addCity","city","length","alert","setItem","stringify","trim","then","catch","error","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onAddCity","_c","$RefreshReg$"],"sources":["D:/My Project/weather-app/src/components/WeatherCity/WeatherCity.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { SearchBar } from '../SearchBar/SearchBar';\r\nimport { WeatherForm, Title } from './WeatherCity.styled';\r\nimport { WeatherList } from '../WeatherList/WeatherList';\r\nimport { apiServiceSearchData } from '../../Api/apiService';\r\n\r\nexport const WeatherCity = ({ weather }) => {\r\n  const [cities, setCities] = useState(\r\n    JSON.parse(localStorage.getItem('cities')) ?? []\r\n  );\r\n  const [value, setValue] = useState('');\r\n  const [weatherCity, setWeatherCity] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  console.log(cities);\r\n  // console.log(`value:${value}`);\r\n  // console.log(weatherCity);\r\n\r\n  const handleSubmit = value => {\r\n    setValue(value);\r\n    // setCities([]);\r\n  };\r\n  // !!!!!!!!!!!!!!!!!\r\n  const addCity = city => {\r\n    if (city.length === 0) {\r\n      alert('Field must be filled');\r\n    } /*else {\r\n      setCities([...cities, { id: nanoid(), weatherCity }]);\r\n    }*/\r\n  };\r\n  //!!!!!!!!!!!!!!!!!\r\n  useEffect(() => {\r\n    //!!!!!!!!!!!!!!\r\n    localStorage.setItem('cities', JSON.stringify(cities));\r\n\r\n    if (value.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    apiServiceSearchData(value)\r\n      .then(weatherCity => setCities([...cities, { ...weatherCity }]))\r\n      // .then(weatherCity => setWeatherCity(weatherCity))\r\n      .catch(error => console.error(error))\r\n      .finally(() => setIsLoading(false));\r\n  }, [value]);\r\n\r\n  return (\r\n    <WeatherForm>\r\n      <Title>Weather</Title>\r\n      <SearchBar\r\n        onSubmit={handleSubmit}\r\n        onAddCity={addCity}\r\n        weather={weather}\r\n      />\r\n      {/* {cities.map(city => (\r\n        <WeatherCard weather={weather} />\r\n      ))} */}\r\n      <WeatherList cities={cities} weatherCity={weatherCity} />\r\n    </WeatherForm>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}