{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Project\\\\weather-app\\\\src\\\\pages\\\\Homepage.jsx\",\n  _s = $RefreshSig$();\nimport { WeatherCity } from '../components/WeatherCity/WeatherCity';\nimport { WeatherSection } from '../components/WeatherSection/WeatherSection';\nimport React, { useEffect, useState, useContext } from 'react';\nimport { apiServiceWeatherData, apiServiceForecastData\n// apiServiceSearchData,\n} from '../Api/apiService';\nimport { Loader } from '../components/Loader/Loader';\nimport { Main } from './Homepage.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePageContext = /*#__PURE__*/React.createContext();\nexport const Homepage = ({\n  isOpen,\n  setIsOpen /*onSelectWeatherCity*/\n}) => {\n  _s();\n  var _JSON$parse, _JSON$parse2, _JSON$parse3, _JSON$parse4, _JSON$parse5, _JSON$parse6;\n  //State weather cities\n  const [weatherCities, setWeatherCities] = useState((_JSON$parse = JSON.parse(localStorage.getItem('weatherCities'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : []);\n  const [forecastCities, setForecastCities] = useState((_JSON$parse2 = JSON.parse(localStorage.getItem('forecastCities'))) !== null && _JSON$parse2 !== void 0 ? _JSON$parse2 : []);\n  // state location weather\n  const [locationWeather, setLocationWeather] = useState((_JSON$parse3 = JSON.parse(localStorage.getItem('locationWeather'))) !== null && _JSON$parse3 !== void 0 ? _JSON$parse3 : {});\n  const [locationForecast, setLocationForecast] = useState((_JSON$parse4 = JSON.parse(localStorage.getItem('locationForecast'))) !== null && _JSON$parse4 !== void 0 ? _JSON$parse4 : {});\n  const [onLocationWeather, setOnLocationWeather] = useState(false);\n  // console.log(onLocationWeather)\n  // state weather section\n  const [weatherSection, setWeatherSection] = useState((_JSON$parse5 = JSON.parse(localStorage.getItem('weatherSection'))) !== null && _JSON$parse5 !== void 0 ? _JSON$parse5 : {});\n  const [forecastSection, setForecastSection] = useState((_JSON$parse6 = JSON.parse(localStorage.getItem('forecastSection'))) !== null && _JSON$parse6 !== void 0 ? _JSON$parse6 : {});\n\n  // state location\n  const [location, setLocation] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentWeatherCityId, setCurrentWeatherCityId] = useState(0);\n  // console.log('currentWeatherCityId:', currentWeatherCityId);\n\n  // const [isOpen, setIsOpen] = useState(false);\n  // console.log('weatherSection:', weatherSection);\n  // console.log('locationWeatherId:', locationWeather.id);\n  // console.log('locationWeather:', locationWeather);\n  // console.log('locationForecast:', locationForecast);\n  // console.log('forecastSection:', forecastSection);\n  // console.log('forecastCities:', forecastCities);\n  // console.log('Homepage weatherCities:', weatherCities);\n  const {\n    latitude,\n    longitude\n  } = location;\n\n  //  useContext(weather (locationWeather),\n  //   setOnLocationWeather,\n  //   weatherCities,\n  //   locationForecast,\n  //   weatherSection,\n  //   forecastSection)\n\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    setLocation({\n      latitude,\n      longitude\n    });\n  };\n  const handleError = error => {\n    console.log(error);\n  };\n  useEffect(() => {\n    setIsLoading(true);\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n    } else {\n      alert('Geolocation is not supported by your browser');\n    }\n    if (latitude !== null && longitude !== null) {\n      apiServiceWeatherData(latitude, longitude).then(weather => setLocationWeather(weather)).catch(error => console.error(error)).finally(() => setIsLoading(false));\n      apiServiceForecastData(latitude, longitude).then(forecast => setLocationForecast(forecast)).catch(error => console.error(error)).finally(() => setIsLoading(false));\n    }\n  }, [latitude, longitude]);\n  localStorage.setItem('locationWeather', JSON.stringify(locationWeather));\n  localStorage.setItem('locationForecast', JSON.stringify(locationForecast));\n  useEffect(() => {\n    const handleChangeCity = () => {\n      weatherCities.forEach(weatherCity => {\n        if (currentWeatherCityId === weatherCity.id) {\n          setWeatherSection(weatherCity);\n        }\n      });\n      forecastCities.forEach(forecastCity => {\n        if (currentWeatherCityId === forecastCity.city.id) {\n          setForecastSection(forecastCity);\n        }\n      });\n    };\n    handleChangeCity();\n  }, [currentWeatherCityId, forecastCities, weatherCities, locationForecast]);\n  const handlerSelectWeatherCity = cityId => setCurrentWeatherCityId(cityId); /*console.log('weatherCityId: ' + id)*/\n\n  return /*#__PURE__*/_jsxDEV(Main, {\n    children: /*#__PURE__*/_jsxDEV(HomePageContext.Provider, {\n      value: weatherCities,\n      children: [Object.keys(locationWeather).length && /*#__PURE__*/_jsxDEV(WeatherCity, {\n        weather: locationWeather,\n        weatherCities: weatherCities,\n        setWeatherCities: setWeatherCities,\n        isOpen: isOpen,\n        setIsOpen: setIsOpen,\n        onSelectWeatherCity: handlerSelectWeatherCity,\n        forecastCities: forecastCities,\n        setForecastCities: setForecastCities,\n        setOnLocationWeather: setOnLocationWeather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), Object.keys(locationWeather).length && Object.keys(locationForecast).length && /*#__PURE__*/_jsxDEV(WeatherSection, {\n        weather: locationWeather\n        // weatherCities={weatherCities}\n        ,\n        weatherSection: weatherSection,\n        forecast: locationForecast,\n        forecastSection: forecastSection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(Homepage, \"CQ1ByPRFM0eHIgkOYQgVhRxGh7U=\");\n_c = Homepage;\nvar _c;\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"names":["WeatherCity","WeatherSection","React","useEffect","useState","useContext","apiServiceWeatherData","apiServiceForecastData","Loader","Main","jsxDEV","_jsxDEV","HomePageContext","createContext","Homepage","isOpen","setIsOpen","_s","_JSON$parse","_JSON$parse2","_JSON$parse3","_JSON$parse4","_JSON$parse5","_JSON$parse6","weatherCities","setWeatherCities","JSON","parse","localStorage","getItem","forecastCities","setForecastCities","locationWeather","setLocationWeather","locationForecast","setLocationForecast","onLocationWeather","setOnLocationWeather","weatherSection","setWeatherSection","forecastSection","setForecastSection","location","setLocation","latitude","longitude","isLoading","setIsLoading","currentWeatherCityId","setCurrentWeatherCityId","handleSuccess","position","coords","handleError","error","console","log","navigator","geolocation","getCurrentPosition","alert","then","weather","catch","finally","forecast","setItem","stringify","handleChangeCity","forEach","weatherCity","id","forecastCity","city","handlerSelectWeatherCity","cityId","children","Provider","value","Object","keys","length","onSelectWeatherCity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/My Project/weather-app/src/pages/Homepage.jsx"],"sourcesContent":["import { WeatherCity } from '../components/WeatherCity/WeatherCity';\r\nimport { WeatherSection } from '../components/WeatherSection/WeatherSection';\r\nimport React, { useEffect, useState, useContext } from 'react';\r\nimport {\r\n  apiServiceWeatherData,\r\n  apiServiceForecastData,\r\n  // apiServiceSearchData,\r\n} from '../Api/apiService';\r\nimport { Loader } from '../components/Loader/Loader';\r\nimport { Main } from './Homepage.styled';\r\n\r\nconst HomePageContext = React.createContext();\r\n\r\nexport const Homepage = ({ isOpen, setIsOpen /*onSelectWeatherCity*/ }) => {\r\n  //State weather cities\r\n  const [weatherCities, setWeatherCities] = useState(\r\n    JSON.parse(localStorage.getItem('weatherCities')) ?? []\r\n  );\r\n  const [forecastCities, setForecastCities] = useState(\r\n    JSON.parse(localStorage.getItem('forecastCities')) ?? []\r\n  );\r\n  // state location weather\r\n  const [locationWeather, setLocationWeather] = useState(\r\n    JSON.parse(localStorage.getItem('locationWeather')) ?? {}\r\n  );\r\n  const [locationForecast, setLocationForecast] = useState(\r\n    JSON.parse(localStorage.getItem('locationForecast')) ?? {}\r\n  );\r\n  const [onLocationWeather, setOnLocationWeather] = useState(false);\r\n  // console.log(onLocationWeather)\r\n  // state weather section\r\n  const [weatherSection, setWeatherSection] = useState(\r\n    JSON.parse(localStorage.getItem('weatherSection')) ?? {}\r\n  );\r\n  const [forecastSection, setForecastSection] = useState(\r\n    JSON.parse(localStorage.getItem('forecastSection')) ?? {}\r\n  );\r\n\r\n  // state location\r\n  const [location, setLocation] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n  });\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [currentWeatherCityId, setCurrentWeatherCityId] = useState(0);\r\n  // console.log('currentWeatherCityId:', currentWeatherCityId);\r\n\r\n  // const [isOpen, setIsOpen] = useState(false);\r\n  // console.log('weatherSection:', weatherSection);\r\n  // console.log('locationWeatherId:', locationWeather.id);\r\n  // console.log('locationWeather:', locationWeather);\r\n  // console.log('locationForecast:', locationForecast);\r\n  // console.log('forecastSection:', forecastSection);\r\n  // console.log('forecastCities:', forecastCities);\r\n  // console.log('Homepage weatherCities:', weatherCities);\r\n  const { latitude, longitude } = location;\r\n\r\n  //  useContext(weather (locationWeather),\r\n  //   setOnLocationWeather,\r\n  //   weatherCities,\r\n  //   locationForecast,\r\n  //   weatherSection,\r\n  //   forecastSection)\r\n\r\n  const handleSuccess = position => {\r\n    const { latitude, longitude } = position.coords;\r\n    setLocation({ latitude, longitude });\r\n  };\r\n\r\n  const handleError = error => {\r\n    console.log(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\r\n    } else {\r\n      alert('Geolocation is not supported by your browser');\r\n    }\r\n\r\n    if (latitude !== null && longitude !== null) {\r\n      apiServiceWeatherData(latitude, longitude)\r\n        .then(weather => setLocationWeather(weather))\r\n        .catch(error => console.error(error))\r\n        .finally(() => setIsLoading(false));\r\n\r\n      apiServiceForecastData(latitude, longitude)\r\n        .then(forecast => setLocationForecast(forecast))\r\n        .catch(error => console.error(error))\r\n        .finally(() => setIsLoading(false));\r\n    }\r\n  }, [latitude, longitude]);\r\n\r\n  localStorage.setItem('locationWeather', JSON.stringify(locationWeather));\r\n  localStorage.setItem('locationForecast', JSON.stringify(locationForecast));\r\n\r\n  useEffect(() => {\r\n    const handleChangeCity = () => {\r\n      weatherCities.forEach(weatherCity => {\r\n        if (currentWeatherCityId === weatherCity.id) {\r\n          setWeatherSection(weatherCity);\r\n        }\r\n      });\r\n      forecastCities.forEach(forecastCity => {\r\n        if (currentWeatherCityId === forecastCity.city.id) {\r\n          setForecastSection(forecastCity);\r\n        }\r\n      });\r\n    };\r\n\r\n    handleChangeCity();\r\n  }, [currentWeatherCityId, forecastCities, weatherCities, locationForecast]);\r\n\r\n  const handlerSelectWeatherCity = cityId =>\r\n    setCurrentWeatherCityId(cityId); /*console.log('weatherCityId: ' + id)*/\r\n\r\n  return (\r\n    <Main>\r\n      <HomePageContext.Provider value={weatherCities}>\r\n        {Object.keys(locationWeather).length && (\r\n          <WeatherCity\r\n            weather={locationWeather}\r\n            weatherCities={weatherCities}\r\n            setWeatherCities={setWeatherCities}\r\n            isOpen={isOpen}\r\n            setIsOpen={setIsOpen}\r\n            onSelectWeatherCity={handlerSelectWeatherCity}\r\n            forecastCities={forecastCities}\r\n            setForecastCities={setForecastCities}\r\n            setOnLocationWeather={setOnLocationWeather}\r\n          />\r\n        )}\r\n        {Object.keys(locationWeather).length &&\r\n          Object.keys(locationForecast).length && (\r\n            <WeatherSection\r\n              weather={locationWeather}\r\n              // weatherCities={weatherCities}\r\n              weatherSection={weatherSection}\r\n              forecast={locationForecast}\r\n              forecastSection={forecastSection}\r\n            />\r\n          )}\r\n        {isLoading && <Loader />}\r\n      </HomePageContext.Provider>\r\n    </Main>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}