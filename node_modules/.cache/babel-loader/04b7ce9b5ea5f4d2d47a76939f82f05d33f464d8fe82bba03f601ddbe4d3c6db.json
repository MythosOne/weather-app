{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Project\\\\weather-app\\\\src\\\\components\\\\WeatherCity\\\\WeatherCity.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n// import { nanoid } from 'nanoid';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { WeatherForm, Title } from './WeatherCity.styled';\nimport { WeatherList } from '../WeatherList/WeatherList';\nimport { apiServiceSearchData, apiServiceForecastData } from '../../Api/apiService';\nimport { Loader } from '../Loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherCity = ({\n  weather\n}) => {\n  _s();\n  var _JSON$parse, _JSON$parse2;\n  const [cities, setCities] = useState((_JSON$parse = JSON.parse(localStorage.getItem('cities'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : {});\n  const [forecast, setForecast] = useState((_JSON$parse2 = JSON.parse(localStorage.getItem('weather'))) !== null && _JSON$parse2 !== void 0 ? _JSON$parse2 : []);\n  const [value, setValue] = useState('');\n  // const [weatherCity, setWeatherCity] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  console.log(cities.coord.lat, cities.coord.lon);\n  // console.log(weatherCity);\n\n  const handleSubmit = value => {\n    setValue(value);\n    // setCities([]);\n  };\n  // !!!!!!!!!!!!!!!!!\n  const addCity = city => {\n    if (city.length === 0) {\n      alert('Field must be filled');\n    } /*else {\r\n      setCities([...cities, { id: nanoid(), weatherCity }]);\r\n      }*/\n  };\n  //!!!!!!!!!!!!!!!!!\n  useEffect(() => {\n    //!!!!!!!!!!!!!!\n    localStorage.setItem('cities', JSON.stringify(cities));\n    if (value.trim() === '') {\n      return;\n    }\n    setIsLoading(true);\n    apiServiceSearchData(value).then(weatherCity => setCities([...cities, {\n      ...weatherCity\n    }]))\n    // .then(weatherCity => setWeatherCity(weatherCity))\n    .catch(error => console.error(error)).finally(() => setIsLoading(false));\n\n    // apiServiceForecastData(cities.coord.lat, cities.coord.lon)\n    //   .then(forecast => setForecast(forecast))\n    //   .catch(error => console.error(error))\n    //   .finally(() => setIsLoading(false));\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(WeatherForm, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSubmit: handleSubmit,\n      onAddCity: addCity,\n      weather: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherList, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherCity, \"qN6v6dK/djmZkpJ3mYt1rDNVvHI=\");\n_c = WeatherCity;\nvar _c;\n$RefreshReg$(_c, \"WeatherCity\");","map":{"version":3,"names":["React","useEffect","useState","SearchBar","WeatherForm","Title","WeatherList","apiServiceSearchData","apiServiceForecastData","Loader","jsxDEV","_jsxDEV","WeatherCity","weather","_s","_JSON$parse","_JSON$parse2","cities","setCities","JSON","parse","localStorage","getItem","forecast","setForecast","value","setValue","isLoading","setIsLoading","console","log","coord","lat","lon","handleSubmit","addCity","city","length","alert","setItem","stringify","trim","then","weatherCity","catch","error","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onAddCity","_c","$RefreshReg$"],"sources":["D:/My Project/weather-app/src/components/WeatherCity/WeatherCity.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n// import { nanoid } from 'nanoid';\r\nimport { SearchBar } from '../SearchBar/SearchBar';\r\nimport { WeatherForm, Title } from './WeatherCity.styled';\r\nimport { WeatherList } from '../WeatherList/WeatherList';\r\nimport {\r\n  apiServiceSearchData,\r\n  apiServiceForecastData,\r\n} from '../../Api/apiService';\r\nimport { Loader } from '../Loader/Loader';\r\n\r\nexport const WeatherCity = ({ weather }) => {\r\n  const [cities, setCities] = useState(\r\n    JSON.parse(localStorage.getItem('cities')) ?? {}\r\n  );\r\n  const [forecast, setForecast] = useState(\r\n    JSON.parse(localStorage.getItem('weather')) ?? []\r\n  );\r\n  const [value, setValue] = useState('');\r\n  // const [weatherCity, setWeatherCity] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  console.log(cities.coord.lat, cities.coord.lon);\r\n  // console.log(weatherCity);\r\n\r\n  const handleSubmit = value => {\r\n    setValue(value);\r\n    // setCities([]);\r\n  };\r\n  // !!!!!!!!!!!!!!!!!\r\n  const addCity = city => {\r\n    if (city.length === 0) {\r\n      alert('Field must be filled');\r\n    } /*else {\r\n      setCities([...cities, { id: nanoid(), weatherCity }]);\r\n    }*/\r\n  };\r\n  //!!!!!!!!!!!!!!!!!\r\n  useEffect(() => {\r\n    //!!!!!!!!!!!!!!\r\n    localStorage.setItem('cities', JSON.stringify(cities));\r\n\r\n    if (value.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    apiServiceSearchData(value)\r\n      .then(weatherCity => setCities([...cities, { ...weatherCity }]))\r\n      // .then(weatherCity => setWeatherCity(weatherCity))\r\n      .catch(error => console.error(error))\r\n      .finally(() => setIsLoading(false));\r\n\r\n    // apiServiceForecastData(cities.coord.lat, cities.coord.lon)\r\n    //   .then(forecast => setForecast(forecast))\r\n    //   .catch(error => console.error(error))\r\n    //   .finally(() => setIsLoading(false));\r\n  }, [value]);\r\n\r\n  return (\r\n    <WeatherForm>\r\n      <Title>Weather</Title>\r\n      <SearchBar\r\n        onSubmit={handleSubmit}\r\n        onAddCity={addCity}\r\n        weather={weather}\r\n      />\r\n      {/* {cities.map(city => (\r\n        <WeatherCard weather={weather} />\r\n      ))} */}\r\n      <WeatherList cities={cities} />\r\n      {isLoading && <Loader />}\r\n    </WeatherForm>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}