{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Project\\\\weather-app\\\\src\\\\components\\\\WeatherCity\\\\WeatherCity.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n// import { nanoid } from 'nanoid';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { WeatherForm, Title } from './WeatherCity.styled';\nimport { WeatherList } from '../WeatherList/WeatherList';\nimport { apiServiceSearchData } from '../../Api/apiService';\nimport { Loader } from '../Loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherCity = ({\n  weather\n}) => {\n  _s();\n  var _JSON$parse, _JSON$parse2;\n  const [weatherCity, setWeatherCity] = useState((_JSON$parse = JSON.parse(localStorage.getItem('weatherCity'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : []);\n  const [forecastCity, setForecastCity] = useState((_JSON$parse2 = JSON.parse(localStorage.getItem('forecast'))) !== null && _JSON$parse2 !== void 0 ? _JSON$parse2 : []);\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  console.log(\"weatherCity:\", weatherCity);\n  const handleSubmit = value => {\n    setValue(value.toLowerCase());\n  };\n  const addCity = city => {\n    if (city.length === 0) {\n      alert('Field must be filled');\n    }\n  };\n  useEffect(() => {\n    localStorage.setItem('weatherCity', JSON.stringify(weatherCity));\n    if (value.trim() === '') {\n      return;\n    }\n    setIsLoading(true);\n    apiServiceSearchData(value).then(data => setWeatherCity([...weatherCity, {\n      ...data\n    }])).catch(error => console.error(error)).finally(() => setIsLoading(false));\n    apiServiceForecastData(latitude, longitude).then(data => setForecastCity(...forecastCity, {\n      ...data\n    })).catch(error => console.error(error)).finally(() => setIsLoading(false));\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(WeatherForm, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSubmit: handleSubmit,\n      onAddCity: addCity,\n      weather: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherList, {\n      cities: weatherCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherCity, \"iDrKoFOfPl9dRr7oWbg8PyYjk+g=\");\n_c = WeatherCity;\nvar _c;\n$RefreshReg$(_c, \"WeatherCity\");","map":{"version":3,"names":["React","useEffect","useState","SearchBar","WeatherForm","Title","WeatherList","apiServiceSearchData","Loader","jsxDEV","_jsxDEV","WeatherCity","weather","_s","_JSON$parse","_JSON$parse2","weatherCity","setWeatherCity","JSON","parse","localStorage","getItem","forecastCity","setForecastCity","value","setValue","isLoading","setIsLoading","console","log","handleSubmit","toLowerCase","addCity","city","length","alert","setItem","stringify","trim","then","data","catch","error","finally","apiServiceForecastData","latitude","longitude","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onAddCity","cities","_c","$RefreshReg$"],"sources":["D:/My Project/weather-app/src/components/WeatherCity/WeatherCity.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n// import { nanoid } from 'nanoid';\r\nimport { SearchBar } from '../SearchBar/SearchBar';\r\nimport { WeatherForm, Title } from './WeatherCity.styled';\r\nimport { WeatherList } from '../WeatherList/WeatherList';\r\nimport { apiServiceSearchData } from '../../Api/apiService';\r\nimport { Loader } from '../Loader/Loader';\r\n\r\nexport const WeatherCity = ({ weather }) => {\r\n  const [weatherCity, setWeatherCity] = useState(\r\n    JSON.parse(localStorage.getItem('weatherCity')) ?? []\r\n  );\r\n  const [forecastCity, setForecastCity] = useState(\r\n    JSON.parse(localStorage.getItem('forecast')) ?? []\r\n  );\r\n  const [value, setValue] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  console.log(\"weatherCity:\",weatherCity)\r\n\r\n  const handleSubmit = value => {\r\n    setValue(value.toLowerCase());\r\n  };\r\n\r\n  const addCity = city => {\r\n    if (city.length === 0) {\r\n      alert('Field must be filled');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('weatherCity', JSON.stringify(weatherCity));\r\n\r\n    if (value.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    apiServiceSearchData(value)\r\n      .then(data => setWeatherCity([...weatherCity, {...data }]))\r\n\r\n      .catch(error => console.error(error))\r\n      .finally(() => setIsLoading(false));\r\n\r\n      apiServiceForecastData(latitude, longitude)\r\n      .then(data => setForecastCity(...forecastCity, {...data}))\r\n      .catch(error => console.error(error))\r\n      .finally(() => setIsLoading(false));\r\n      \r\n  }, [value]);\r\n\r\n  return (\r\n    <WeatherForm>\r\n      <Title>Weather</Title>\r\n      <SearchBar\r\n        onSubmit={handleSubmit}\r\n        onAddCity={addCity}\r\n        weather={weather}\r\n      />\r\n\r\n      <WeatherList cities={weatherCity} />\r\n      {isLoading && <Loader />}\r\n    </WeatherForm>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AACA,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,WAAW,EAAEC,KAAK,QAAQ,sBAAsB;AACzD,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,oBAAoB,QAAQ,sBAAsB;AAC3D,SAASC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,WAAA,EAAAC,YAAA;EAC1C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,EAAAY,WAAA,GAC5CI,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,cAAAP,WAAA,cAAAA,WAAA,GAAI,EACrD,CAAC;EACD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,EAAAa,YAAA,GAC9CG,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,cAAAN,YAAA,cAAAA,YAAA,GAAI,EAClD,CAAC;EACD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACjD0B,OAAO,CAACC,GAAG,CAAC,cAAc,EAACb,WAAW,CAAC;EAEvC,MAAMc,YAAY,GAAGN,KAAK,IAAI;IAC5BC,QAAQ,CAACD,KAAK,CAACO,WAAW,CAAC,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMC,OAAO,GAAGC,IAAI,IAAI;IACtB,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACrBC,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAEDlC,SAAS,CAAC,MAAM;IACdmB,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAElB,IAAI,CAACmB,SAAS,CAACrB,WAAW,CAAC,CAAC;IAEhE,IAAIQ,KAAK,CAACc,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACvB;IACF;IAEAX,YAAY,CAAC,IAAI,CAAC;IAElBpB,oBAAoB,CAACiB,KAAK,CAAC,CACxBe,IAAI,CAACC,IAAI,IAAIvB,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAE;MAAC,GAAGwB;IAAK,CAAC,CAAC,CAAC,CAAC,CAE1DC,KAAK,CAACC,KAAK,IAAId,OAAO,CAACc,KAAK,CAACA,KAAK,CAAC,CAAC,CACpCC,OAAO,CAAC,MAAMhB,YAAY,CAAC,KAAK,CAAC,CAAC;IAEnCiB,sBAAsB,CAACC,QAAQ,EAAEC,SAAS,CAAC,CAC1CP,IAAI,CAACC,IAAI,IAAIjB,eAAe,CAAC,GAAGD,YAAY,EAAE;MAAC,GAAGkB;IAAI,CAAC,CAAC,CAAC,CACzDC,KAAK,CAACC,KAAK,IAAId,OAAO,CAACc,KAAK,CAACA,KAAK,CAAC,CAAC,CACpCC,OAAO,CAAC,MAAMhB,YAAY,CAAC,KAAK,CAAC,CAAC;EAEvC,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EAEX,oBACEd,OAAA,CAACN,WAAW;IAAA2C,QAAA,gBACVrC,OAAA,CAACL,KAAK;MAAA0C,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtBzC,OAAA,CAACP,SAAS;MACRiD,QAAQ,EAAEtB,YAAa;MACvBuB,SAAS,EAAErB,OAAQ;MACnBpB,OAAO,EAAEA;IAAQ;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eAEFzC,OAAA,CAACJ,WAAW;MAACgD,MAAM,EAAEtC;IAAY;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACnCzB,SAAS,iBAAIhB,OAAA,CAACF,MAAM;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAElB,CAAC;AAACtC,EAAA,CAxDWF,WAAW;AAAA4C,EAAA,GAAX5C,WAAW;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}