{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Project\\\\weather-app\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { WeatherCity } from '../components/WeatherCity/WeatherCity';\nimport { MyLocationWeather } from '../components/MyLocationWeather/MyLocationWeather';\nimport { useEffect, useState } from 'react';\nimport { getLocationWeatherData } from '../Api/apiService';\nimport { Loader } from '../components/Loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  container: {\n    minHeight: 'calc(80vh - 50px)',\n    display: 'flex',\n    gap: '10px',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n};\nconst Home = () => {\n  _s();\n  var _JSON$parse;\n  const [weather, setWeather] = useState((_JSON$parse = JSON.parse(localStorage.getItem('weather'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : {});\n  const [isLoading, setIsLoading] = useState(false);\n  const [location, setLocation] = useState({\n    latitude: null,\n    longitude: null\n  });\n  console.log(location);\n  console.log(weather);\n  const {\n    latitude,\n    longitude\n  } = location;\n  useEffect(() => {\n    localStorage.setItem('weather', JSON.stringify(weather));\n    setIsLoading(true);\n\n    // if ('geolocation' in navigator) {\n    //   navigator.geolocation.getCurrentPosition(position => {\n    //     setLocation({\n    //       latitude: position.coords.latitude,\n    //       longitude: position.coords.longitude,\n    //     });\n    //   });\n    // } else {\n    //   alert('Geolocation is not supported by your browser');\n    // }\n\n    // if (latitude !== null && longitude !== null) {\n    //   getLocationWeatherData(latitude, longitude)\n    //     .then((weather) => setWeather(weather))\n    //     .catch(error => console.error(error))\n    //     .finally(() => setIsLoading(false));\n    // }\n\n    const getWeather = async () => {};\n  }, [latitude, longitude]);\n\n  // console.log(weather)\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(WeatherCity, {\n      weather: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyLocationWeather, {\n      weather: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"A445BOM054QA0NsMj0SNFRfyNBk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["WeatherCity","MyLocationWeather","useEffect","useState","getLocationWeatherData","Loader","jsxDEV","_jsxDEV","styles","container","minHeight","display","gap","alignItems","justifyContent","Home","_s","_JSON$parse","weather","setWeather","JSON","parse","localStorage","getItem","isLoading","setIsLoading","location","setLocation","latitude","longitude","console","log","setItem","stringify","getWeather","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/My Project/weather-app/src/pages/Home.jsx"],"sourcesContent":["import { WeatherCity } from '../components/WeatherCity/WeatherCity';\r\nimport { MyLocationWeather } from '../components/MyLocationWeather/MyLocationWeather';\r\nimport { useEffect, useState } from 'react';\r\nimport {getLocationWeatherData } from '../Api/apiService';\r\nimport { Loader } from '../components/Loader/Loader';\r\n\r\nconst styles = {\r\n  container: {\r\n    minHeight: 'calc(80vh - 50px)',\r\n    display: 'flex',\r\n    gap: '10px',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n};\r\n\r\nconst Home = () => {\r\n  const [weather, setWeather] = useState(JSON.parse(localStorage.getItem('weather')) ?? {});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [location, setLocation] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n  });\r\n  console.log(location);\r\n  console.log(weather)\r\n  const { latitude, longitude } = location;\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('weather', JSON.stringify(weather));\r\n    setIsLoading(true);\r\n\r\n    // if ('geolocation' in navigator) {\r\n    //   navigator.geolocation.getCurrentPosition(position => {\r\n    //     setLocation({\r\n    //       latitude: position.coords.latitude,\r\n    //       longitude: position.coords.longitude,\r\n    //     });\r\n    //   });\r\n    // } else {\r\n    //   alert('Geolocation is not supported by your browser');\r\n    // }\r\n\r\n    // if (latitude !== null && longitude !== null) {\r\n    //   getLocationWeatherData(latitude, longitude)\r\n    //     .then((weather) => setWeather(weather))\r\n    //     .catch(error => console.error(error))\r\n    //     .finally(() => setIsLoading(false));\r\n    // }\r\n\r\n    const getWeather = async () =>{\r\n      \r\n    }\r\n  }, [latitude, longitude]);\r\n\r\n  // console.log(weather)\r\n\r\n  return (\r\n    <section style={styles.container}>\r\n      <WeatherCity weather={weather} />\r\n      <MyLocationWeather weather={weather} />\r\n      {isLoading && <Loader />}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,uCAAuC;AACnE,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAAQC,sBAAsB,QAAQ,mBAAmB;AACzD,SAASC,MAAM,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,MAAM,GAAG;EACbC,SAAS,EAAE;IACTC,SAAS,EAAE,mBAAmB;IAC9BC,OAAO,EAAE,MAAM;IACfC,GAAG,EAAE,MAAM;IACXC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB;AACF,CAAC;AAED,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,WAAA;EACjB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,EAAAc,WAAA,GAACG,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,cAAAN,WAAA,cAAAA,WAAA,GAAI,CAAC,CAAC,CAAC;EACzF,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC;IACvCyB,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE;EACb,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACrBI,OAAO,CAACC,GAAG,CAACb,OAAO,CAAC;EACpB,MAAM;IAAEU,QAAQ;IAAEC;EAAU,CAAC,GAAGH,QAAQ;EAExCxB,SAAS,CAAC,MAAM;IACdoB,YAAY,CAACU,OAAO,CAAC,SAAS,EAAEZ,IAAI,CAACa,SAAS,CAACf,OAAO,CAAC,CAAC;IACxDO,YAAY,CAAC,IAAI,CAAC;;IAElB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAW,CAE9B,CAAC;EACH,CAAC,EAAE,CAACN,QAAQ,EAAEC,SAAS,CAAC,CAAC;;EAEzB;;EAEA,oBACEtB,OAAA;IAAS4B,KAAK,EAAE3B,MAAM,CAACC,SAAU;IAAA2B,QAAA,gBAC/B7B,OAAA,CAACP,WAAW;MAACkB,OAAO,EAAEA;IAAQ;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjCjC,OAAA,CAACN,iBAAiB;MAACiB,OAAO,EAAEA;IAAQ;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACtChB,SAAS,iBAAIjB,OAAA,CAACF,MAAM;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEd,CAAC;AAACxB,EAAA,CA/CID,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AAiDV,eAAeA,IAAI;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}