{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Project\\\\weather-app\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { WeatherCity } from '../components/WeatherCity/WeatherCity';\nimport { MyLocationWeather } from '../components/MyLocationWeather/MyLocationWeather';\nimport { useEffect, useState } from 'react';\nimport { apiServiceWeatherData } from '../Api/apiService';\nimport { Loader } from '../components/Loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  var _JSON$parse;\n  const [weather, setWeather] = useState((_JSON$parse = JSON.parse(localStorage.getItem('weather'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : {});\n  const [isLoading, setIsLoading] = useState(false);\n  const [location, setLocation] = useState({\n    latitude: null,\n    longitude: null\n  });\n  console.log(location);\n  console.log(weather);\n  const {\n    latitude,\n    longitude\n  } = location;\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    setLocation({\n      latitude,\n      longitude\n    });\n  };\n  const handleError = error => {\n    console.log(error);\n  };\n  useEffect(() => {\n    localStorage.setItem('weather', JSON.stringify(weather));\n    setIsLoading(true);\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n    } else {\n      alert('Geolocation is not supported by your browser');\n    }\n\n    // if (latitude !== null && longitude !== null) {\n    //   apiServiceWeatherData(latitude, longitude)\n    //     .then(weather => setWeather(weather))\n    //     .catch(error => console.error(error))\n    //     .finally(() => setIsLoading(false));\n    // }\n\n    const getLocationWeather = async () => {\n      try {\n        const data = await apiServiceWeatherData(latitude, longitude);\n        setWeather(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getLocationWeather();\n  }, [latitude, longitude]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }, this)\n  }, void 0, false);\n};\n_s(Home, \"A445BOM054QA0NsMj0SNFRfyNBk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["WeatherCity","MyLocationWeather","useEffect","useState","apiServiceWeatherData","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","_JSON$parse","weather","setWeather","JSON","parse","localStorage","getItem","isLoading","setIsLoading","location","setLocation","latitude","longitude","console","log","handleSuccess","position","coords","handleError","error","setItem","stringify","navigator","geolocation","getCurrentPosition","alert","getLocationWeather","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/My Project/weather-app/src/pages/Home.jsx"],"sourcesContent":["import { WeatherCity } from '../components/WeatherCity/WeatherCity';\r\nimport { MyLocationWeather } from '../components/MyLocationWeather/MyLocationWeather';\r\nimport { useEffect, useState } from 'react';\r\nimport { apiServiceWeatherData } from '../Api/apiService';\r\nimport { Loader } from '../components/Loader/Loader';\r\n\r\nconst Home = () => {\r\n  const [weather, setWeather] = useState(\r\n    JSON.parse(localStorage.getItem('weather')) ?? {}\r\n  );\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [location, setLocation] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n  });\r\n  console.log(location);\r\n  console.log(weather);\r\n  const { latitude, longitude } = location;\r\n\r\n  const handleSuccess = position => {\r\n    const { latitude, longitude } = position.coords;\r\n    setLocation({ latitude, longitude });\r\n  };\r\n\r\n  const handleError = error => {\r\n    console.log(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('weather', JSON.stringify(weather));\r\n    setIsLoading(true);\r\n\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\r\n    } else {\r\n      alert('Geolocation is not supported by your browser');\r\n    }\r\n\r\n    // if (latitude !== null && longitude !== null) {\r\n    //   apiServiceWeatherData(latitude, longitude)\r\n    //     .then(weather => setWeather(weather))\r\n    //     .catch(error => console.error(error))\r\n    //     .finally(() => setIsLoading(false));\r\n    // }\r\n\r\n    const getLocationWeather = async () => {\r\n      try {\r\n        const data = await apiServiceWeatherData(latitude, longitude);\r\n        setWeather(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    getLocationWeather();\r\n  }, [latitude, longitude]);\r\n\r\n  return (\r\n    <>\r\n      {/* {!Object.keys(weather).length && <WeatherCity weather={weather} />}\r\n      {!Object.keys(weather).length && <MyLocationWeather weather={weather} />} */}\r\n      {isLoading && <Loader />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,uCAAuC;AACnE,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,qBAAqB,QAAQ,mBAAmB;AACzD,SAASC,MAAM,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,WAAA;EACjB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,EAAAS,WAAA,GACpCG,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,cAAAN,WAAA,cAAAA,WAAA,GAAI,CAAC,CAClD,CAAC;EACD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC;IACvCoB,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE;EACb,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACrBI,OAAO,CAACC,GAAG,CAACb,OAAO,CAAC;EACpB,MAAM;IAAEU,QAAQ;IAAEC;EAAU,CAAC,GAAGH,QAAQ;EAExC,MAAMM,aAAa,GAAGC,QAAQ,IAAI;IAChC,MAAM;MAAEL,QAAQ;MAAEC;IAAU,CAAC,GAAGI,QAAQ,CAACC,MAAM;IAC/CP,WAAW,CAAC;MAAEC,QAAQ;MAAEC;IAAU,CAAC,CAAC;EACtC,CAAC;EAED,MAAMM,WAAW,GAAGC,KAAK,IAAI;IAC3BN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACpB,CAAC;EAED7B,SAAS,CAAC,MAAM;IACde,YAAY,CAACe,OAAO,CAAC,SAAS,EAAEjB,IAAI,CAACkB,SAAS,CAACpB,OAAO,CAAC,CAAC;IACxDO,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI,aAAa,IAAIc,SAAS,EAAE;MAC9BA,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACT,aAAa,EAAEG,WAAW,CAAC;IACtE,CAAC,MAAM;MACLO,KAAK,CAAC,8CAA8C,CAAC;IACvD;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMnC,qBAAqB,CAACmB,QAAQ,EAAEC,SAAS,CAAC;QAC7DV,UAAU,CAACyB,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;MACpB,CAAC,SAAS;QACRX,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDkB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACf,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAEzB,oBACEjB,OAAA,CAAAE,SAAA;IAAA+B,QAAA,EAGGrB,SAAS,iBAAIZ,OAAA,CAACF,MAAM;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACxB,CAAC;AAEP,CAAC;AAACjC,EAAA,CA5DID,IAAI;AAAAmC,EAAA,GAAJnC,IAAI;AA8DV,eAAeA,IAAI;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}