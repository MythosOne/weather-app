{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Project\\\\weather-app\\\\src\\\\pages\\\\Homepage.jsx\",\n  _s = $RefreshSig$();\nimport { WeatherCity } from '../components/WeatherCity/WeatherCity';\nimport { WeatherSection } from '../components/WeatherSection/WeatherSection';\nimport { useEffect, useState } from 'react';\nimport { apiServiceWeatherData, apiServiceForecastData\n// apiServiceSearchData,\n} from '../Api/apiService';\nimport { Loader } from '../components/Loader/Loader';\nimport { Main } from './Homepage.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Homepage = ({\n  isOpen,\n  setIsOpen /*onSelectWeatherCity*/\n}) => {\n  _s();\n  var _JSON$parse, _JSON$parse2, _JSON$parse3;\n  const [weatherCities, setWeatherCities] = useState((_JSON$parse = JSON.parse(localStorage.getItem('weatherCities'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : []);\n  const [locationWeather, setLocationWeather] = useState((_JSON$parse2 = JSON.parse(localStorage.getItem('weather'))) !== null && _JSON$parse2 !== void 0 ? _JSON$parse2 : []);\n  const [weatherSection, setWeatherSection] = useState({});\n  const [forecastSection, setForecastSection] = useState({});\n  const [forecast, setForecast] = useState((_JSON$parse3 = JSON.parse(localStorage.getItem('forecast'))) !== null && _JSON$parse3 !== void 0 ? _JSON$parse3 : []);\n  const [location, setLocation] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentWeatherCityId, setCurrentWeatherCityId] = useState(0);\n  console.log('currentWeatherCityId:', currentWeatherCityId);\n\n  // const [isOpen, setIsOpen] = useState(false);\n  // console.log(\"weatherSection:\", weatherSection);\n  // console.log('locationWeatherId:', locationWeather.id);\n  // console.log('locationWeather:', locationWeather);\n  console.log('forecast:', forecast);\n  console.log('weatherCities:', weatherCities);\n  const {\n    latitude,\n    longitude\n  } = location;\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    setLocation({\n      latitude,\n      longitude\n    });\n  };\n  const handleError = error => {\n    console.log(error);\n  };\n  useEffect(() => {\n    localStorage.setItem('locationWeather', JSON.stringify(locationWeather));\n    localStorage.setItem('locationWeather', JSON.stringify(locationWeather));\n    setIsLoading(true);\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n    } else {\n      alert('Geolocation is not supported by your browser');\n    }\n    if (latitude !== null && longitude !== null) {\n      apiServiceWeatherData(latitude, longitude).then(weather => setLocationWeather(weather)).catch(error => console.error(error)).finally(() => setIsLoading(false));\n      apiServiceForecastData(latitude, longitude).then(forecast => setForecast(forecast)).catch(error => console.error(error)).finally(() => setIsLoading(false));\n    }\n  }, [latitude, longitude]);\n  useEffect(() => {\n    const handleChangeCity = () => {\n      weatherCities.map(city => {\n        if (currentWeatherCityId === city.id) {\n          setWeatherSection(city);\n        }\n        return city;\n        // return console.log('weatherSection:', weatherSection);\n      });\n    };\n\n    handleChangeCity();\n  }, [currentWeatherCityId]);\n  const handlerSelectWeatherCity = cityId => setCurrentWeatherCityId(cityId); /*console.log('weatherCityId: ' + id)*/\n\n  return /*#__PURE__*/_jsxDEV(Main, {\n    children: [Object.keys(locationWeather).length && /*#__PURE__*/_jsxDEV(WeatherCity, {\n      weather: locationWeather,\n      weatherCities: weatherCities,\n      setWeatherCities: setWeatherCities,\n      isOpen: isOpen,\n      setIsOpen: setIsOpen,\n      onSelectWeatherCity: handlerSelectWeatherCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), (Object.keys(locationWeather).length || Object.keys(forecast).length) && /*#__PURE__*/_jsxDEV(WeatherSection, {\n      weather: locationWeather,\n      weatherCity: weatherSection,\n      weatherSection: weatherSection,\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Homepage, \"DzRiWI9zJlnTPnGodrLo57MF+5A=\");\n_c = Homepage;\nvar _c;\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"names":["WeatherCity","WeatherSection","useEffect","useState","apiServiceWeatherData","apiServiceForecastData","Loader","Main","jsxDEV","_jsxDEV","Homepage","isOpen","setIsOpen","_s","_JSON$parse","_JSON$parse2","_JSON$parse3","weatherCities","setWeatherCities","JSON","parse","localStorage","getItem","locationWeather","setLocationWeather","weatherSection","setWeatherSection","forecastSection","setForecastSection","forecast","setForecast","location","setLocation","latitude","longitude","isLoading","setIsLoading","currentWeatherCityId","setCurrentWeatherCityId","console","log","handleSuccess","position","coords","handleError","error","setItem","stringify","navigator","geolocation","getCurrentPosition","alert","then","weather","catch","finally","handleChangeCity","map","city","id","handlerSelectWeatherCity","cityId","children","Object","keys","length","onSelectWeatherCity","fileName","_jsxFileName","lineNumber","columnNumber","weatherCity","_c","$RefreshReg$"],"sources":["D:/My Project/weather-app/src/pages/Homepage.jsx"],"sourcesContent":["import { WeatherCity } from '../components/WeatherCity/WeatherCity';\r\nimport { WeatherSection } from '../components/WeatherSection/WeatherSection';\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  apiServiceWeatherData,\r\n  apiServiceForecastData,\r\n  // apiServiceSearchData,\r\n} from '../Api/apiService';\r\nimport { Loader } from '../components/Loader/Loader';\r\nimport { Main } from './Homepage.styled';\r\n\r\nexport const Homepage = ({ isOpen, setIsOpen /*onSelectWeatherCity*/ }) => {\r\n  const [weatherCities, setWeatherCities] = useState(\r\n    JSON.parse(localStorage.getItem('weatherCities')) ?? []\r\n  );\r\n  const [locationWeather, setLocationWeather] = useState(\r\n    JSON.parse(localStorage.getItem('weather')) ?? []\r\n  );\r\n  const [weatherSection, setWeatherSection] = useState({});\r\n  const [forecastSection, setForecastSection] = useState({});\r\n  const [forecast, setForecast] = useState(\r\n    JSON.parse(localStorage.getItem('forecast')) ?? []\r\n  );\r\n  const [location, setLocation] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currentWeatherCityId, setCurrentWeatherCityId] = useState(0);\r\n  console.log('currentWeatherCityId:', currentWeatherCityId);\r\n\r\n  // const [isOpen, setIsOpen] = useState(false);\r\n  // console.log(\"weatherSection:\", weatherSection);\r\n  // console.log('locationWeatherId:', locationWeather.id);\r\n  // console.log('locationWeather:', locationWeather);\r\n  console.log('forecast:', forecast);\r\n  console.log('weatherCities:', weatherCities);\r\n  const { latitude, longitude } = location;\r\n\r\n  const handleSuccess = position => {\r\n    const { latitude, longitude } = position.coords;\r\n    setLocation({ latitude, longitude });\r\n  };\r\n\r\n  const handleError = error => {\r\n    console.log(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('locationWeather', JSON.stringify(locationWeather));\r\n    localStorage.setItem('locationWeather', JSON.stringify(locationWeather));\r\n    setIsLoading(true);\r\n\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\r\n    } else {\r\n      alert('Geolocation is not supported by your browser');\r\n    }\r\n\r\n    if (latitude !== null && longitude !== null) {\r\n      apiServiceWeatherData(latitude, longitude)\r\n        .then(weather => setLocationWeather(weather))\r\n        .catch(error => console.error(error))\r\n        .finally(() => setIsLoading(false));\r\n\r\n      apiServiceForecastData(latitude, longitude)\r\n        .then(forecast => setForecast(forecast))\r\n        .catch(error => console.error(error))\r\n        .finally(() => setIsLoading(false));\r\n    }\r\n  }, [latitude, longitude]);\r\n\r\n  useEffect(() => {\r\n    const handleChangeCity = () => {\r\n      weatherCities.map(city => {\r\n        if (currentWeatherCityId === city.id) {\r\n          setWeatherSection(city);\r\n        }\r\n\r\n        return city\r\n        // return console.log('weatherSection:', weatherSection);\r\n      });\r\n    };\r\n\r\n    handleChangeCity();\r\n\r\n  }, [currentWeatherCityId]);\r\n\r\n  const handlerSelectWeatherCity = cityId =>\r\n    setCurrentWeatherCityId(cityId); /*console.log('weatherCityId: ' + id)*/\r\n\r\n  return (\r\n    <Main>\r\n      {Object.keys(locationWeather).length && (\r\n        <WeatherCity\r\n          weather={locationWeather}\r\n          weatherCities={weatherCities}\r\n          setWeatherCities={setWeatherCities}\r\n          isOpen={isOpen}\r\n          setIsOpen={setIsOpen}\r\n          onSelectWeatherCity={handlerSelectWeatherCity}\r\n        />\r\n      )}\r\n      {(Object.keys(locationWeather).length ||\r\n        Object.keys(forecast).length) && (\r\n        <WeatherSection\r\n          weather={locationWeather}\r\n          weatherCity={weatherSection}\r\n          weatherSection={weatherSection}\r\n          forecast={forecast}\r\n        />\r\n      )}\r\n      {isLoading && <Loader />}\r\n    </Main>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}